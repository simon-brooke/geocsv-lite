["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$window",["^ ","~$location",["^ ","~$search",["^ "]]],"~$Papa",["^ ","~$parse",["^ "]],"~$Object",["^ "],"~$console",["^ ","~$debug",["^ "]],"~$JSON",["^ ","^7",["^ "]]],"~:use-macros",["^ ","~$go","~$cljs.core.async.macros"],"~:excludes",["~#set",[]],"~:name","~$geocsv-lite.data","~:imports",null,"~:requires",["^ ","~$dom","~$clojure.browser.dom","~$cljs-http.client","^G","^F","^F","~$cljs.core.async","^H","~$gis","~$geocsv-lite.gis","~$n","~$geocsv-lite.notify","~$cs","~$clojure.string","~$geocsv-lite.map","^N","^K","^K","^M","^M","^J","^J","~$http","^G"],"~:cljs.spec/speced-vars",[],"~:uses",["^ ","~$<!","^H","~$get-view","^N"],"~:defs",["^ ","~$get-query-part-as-map",["^ ","~:protocol-inline",null,"~:meta",["^ ","~:file","/home/simon/workspace/geocsv-lite/src/geocsv_lite/data.cljs","~:line",13,"~:column",7,"~:end-line",13,"~:end-column",28,"~:arglists",["~#list",["~$quote",["^12",[[]]]]],"~:doc","Returns the query part of the current document URL as a keyword-string map."],"^A","~$geocsv-lite.data/get-query-part-as-map","^X","src/geocsv_lite/data.cljs","^10",28,"~:method-params",["^12",[[]]],"~:protocol-impl",null,"~:arglists-meta",["^12",[null,null]],"^Z",1,"~:variadic?",false,"^Y",13,"~:ret-tag",["^@",["~$clj","~$clj-nil"]],"^[",13,"~:max-fixed-arity",0,"~:fn-var",true,"^11",["^12",["^13",["^12",[[]]]]],"^14","Returns the query part of the current document URL as a keyword-string map."],"~$get-csv-url",["^ ","^V",null,"^W",["^ ","^X","/home/simon/workspace/geocsv-lite/src/geocsv_lite/data.cljs","^Y",22,"^Z",7,"^[",22,"^10",18,"^11",["^12",["^13",["^12",[["~$query"]]]]],"^14","~`query` is expected a keyword-string map which may have keys:\n\n  * `:docid` whose value is a Google Sheets document id;\n  * `:uri` whose value is the URI of a JSON or CSV file.\n\n  If either of these keys is found, returns an appropriate URL, else nil."],"^A","~$geocsv-lite.data/get-csv-url","^X","src/geocsv_lite/data.cljs","^10",18,"^16",["^12",[["^1@"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",22,"^1:",["^@",["~$any","~$string","^1<"]],"^[",22,"^1=",1,"^1>",true,"^11",["^12",["^13",["^12",[["^1@"]]]]],"^14","~`query` is expected a keyword-string map which may have keys:\n\n  * `:docid` whose value is a Google Sheets document id;\n  * `:uri` whose value is the URI of a JSON or CSV file.\n\n  If either of these keys is found, returns an appropriate URL, else nil."],"~$prepare-records",["^ ","^V",null,"^W",["^ ","^X","/home/simon/workspace/geocsv-lite/src/geocsv_lite/data.cljs","^Y",40,"^Z",7,"^[",40,"^10",22,"^11",["^12",["^13",["^12",[["~$data"]]]]],"^14","~`data` is expected to be a vector of vectors, where the first vector\n  contains column headers and the remaining vectors contain records.\n  Return this as a vector of maps, with each map having keys taken from\n  the first vector and values taken from one of the subsequent vectors."],"^A","~$geocsv-lite.data/prepare-records","^X","src/geocsv_lite/data.cljs","^10",22,"^16",["^12",[["^1E"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",40,"^1:","~$cljs.core/LazySeq","^[",40,"^1=",1,"^1>",true,"^11",["^12",["^13",["^12",[["^1E"]]]]],"^14","~`data` is expected to be a vector of vectors, where the first vector\n  contains column headers and the remaining vectors contain records.\n  Return this as a vector of maps, with each map having keys taken from\n  the first vector and values taken from one of the subsequent vectors."],"~$default-handler",["^ ","^V",null,"^W",["^ ","^X","/home/simon/workspace/geocsv-lite/src/geocsv_lite/data.cljs","^Y",64,"^Z",7,"^[",64,"^10",22,"^11",["^12",["^13",["^12",[["~$response","~$k"]]]]],"^14","When data is received from a URL, it is received asynchronously. This\n  is the default callback called with the `response` of the HTTP request,\n  and the keyword `k` identifying the map view, to populate the map with\n  data."],"^A","~$geocsv-lite.data/default-handler","^X","src/geocsv_lite/data.cljs","^10",22,"^16",["^12",[["^1I","~$k"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",64,"^1:",["^@",["^1B","^1<"]],"^[",64,"^1=",2,"^1>",true,"^11",["^12",["^13",["^12",[["^1I","~$k"]]]]],"^14","When data is received from a URL, it is received asynchronously. This\n  is the default callback called with the `response` of the HTTP request,\n  and the keyword `k` identifying the map view, to populate the map with\n  data."],"~$get-data-from-uri",["^ ","^V",null,"^W",["^ ","^X","/home/simon/workspace/geocsv-lite/src/geocsv_lite/data.cljs","^Y",83,"^Z",7,"^[",83,"^10",24,"^11",["^12",["^13",["^12",[["~$k","~$uri"]]]]],"^14","Get data for the view identified by this keyword `k` from this `uri`."],"^A","~$geocsv-lite.data/get-data-from-uri","^X","src/geocsv_lite/data.cljs","^10",24,"^16",["^12",[["~$k","^1L"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",83,"^1:","^1B","^[",83,"^1=",2,"^1>",true,"^11",["^12",["^13",["^12",[["~$k","^1L"]]]]],"^14","Get data for the view identified by this keyword `k` from this `uri`."],"~$get-data",["^ ","^V",null,"^W",["^ ","^X","/home/simon/workspace/geocsv-lite/src/geocsv_lite/data.cljs","^Y",90,"^Z",7,"^[",90,"^10",15,"^11",["^12",["^13",["^12",[["~$k","~$data-source"]]]]],"^14","Get data for the view identified by this keyword `k` from this `data-source`.\n  The data source may be a URL, or a CSV or JSON formatted string."],"^A","~$geocsv-lite.data/get-data","^X","src/geocsv_lite/data.cljs","^10",15,"^16",["^12",[["~$k","^1O"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",90,"^1:",["^@",["^1B","^1<"]],"^[",90,"^1=",2,"^1>",true,"^11",["^12",["^13",["^12",[["~$k","^1O"]]]]],"^14","Get data for the view identified by this keyword `k` from this `data-source`.\n  The data source may be a URL, or a CSV or JSON formatted string."],"~$get-data-with-uri-and-handler",["^ ","^V",null,"^W",["^ ","^X","/home/simon/workspace/geocsv-lite/src/geocsv_lite/data.cljs","^Y",117,"^Z",7,"^[",117,"^10",36,"^11",["^12",["^13",["^12",[["^1L","~$handler-fn","~$k"]]]]]],"^A","~$geocsv-lite.data/get-data-with-uri-and-handler","^X","src/geocsv_lite/data.cljs","^10",36,"^16",["^12",[["^1L","^1R","~$k"]]],"^17",null,"^18",["^12",[null,null]],"^Z",1,"^19",false,"^Y",117,"^1:","^1B","^[",117,"^1=",3,"^1>",true,"^11",["^12",["^13",["^12",[["^1L","^1R","~$k"]]]]]]],"~:cljs.spec/registry-ref",[],"~:require-macros",["^ ","^>","^>","^H","^H"],"~:cljs.analyzer/constants",["^ ","~:seen",["^@",["~:errors","~:else","~:recur","~:with-credentials?","~:status","~:uri","~:dynamicTyping","~:body","~:keywordize-keys","~:docid","~:data"]],"~:order",["^25","^21","^20","^23","^26","^22","^24","^1[","^1Z","^1Y","^1X"]],"^14",null]